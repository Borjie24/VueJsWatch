describe('OperationStatusScreen.vue - createCanvas', () => {
  let wrapper, mockContext, mockImage;

  beforeEach(() => {
    wrapper = shallowMount(OperationStatusScreen, {
      mocks: {
        $refs: {
          myCanvas: {
            getContext: jest.fn(),
          },
        },
      },
      global: {
        components: {
          VSimpleTable: 'v-simple-table',
          VContainer: 'v-container',
          VCol: 'v-col',
          VRow: 'v-row',
        },
      },
    });

    mockContext = {
      drawImage: jest.fn(),
      fillRect: jest.fn(),
      strokeRect: jest.fn(),
      beginPath: jest.fn(),
      arc: jest.fn(),
      closePath: jest.fn(),
      fill: jest.fn(),
      stroke: jest.fn(),
      lineWidth: null,
      fillStyle: '',
      strokeStyle: '',
    };

    mockImage = { src: '', onload: null };
    global.Image = jest.fn(() => mockImage);

    wrapper.vm.$refs.myCanvas.getContext.mockReturnValue(mockContext);
    wrapper.setData({
      rectangles: [
        { x: 10, y: 20, width: 50, height: 50, operation_status: 1, process_id: 'A' },
        { x: 60, y: 80, width: 40, height: 40, operation_status: 2, process_id: 'B' },
      ],
    });

    jest.spyOn(wrapper.vm, 'drawCircleLabel').mockImplementation(() => {});
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  it('should draw rectangles and labels on the canvas', async () => {
    const imageURL = 'dummy_image_url';
    mockImage.onload = jest.fn();

    await wrapper.vm.createCanvas(imageURL);
    mockImage.onload();

    expect(mockContext.drawImage).toHaveBeenCalledWith(mockImage, 0, 0, 416, 700);
    expect(mockContext.fillRect).toHaveBeenCalledWith(10, 20, 50, 50);
    expect(mockContext.strokeRect).toHaveBeenCalledWith(10, 20, 50, 50);
    expect(wrapper.vm.drawCircleLabel).toHaveBeenCalledWith(
      mockContext,
      35,
      45,
      15,
      'A',
      'transparent',
      'white'
    );
    expect(wrapper.vm.drawCircleLabel).toHaveBeenCalledWith(
      mockContext,
      80,
      100,
      15,
      'B',
      'transparent',
      '#424242'
    );
  });
});
