import threading
import time
from flask import Flask, jsonify

app = Flask(__name__)

# A list to store the current coordinates
coordinates = []

def increment_last_width():
    """Background function to increment the last coordinate's width every 2 seconds"""
    while True:
        if coordinates:  # Ensure there are coordinates to update
            # Increment the width of the last coordinate by 1 every 2 seconds
            coordinates[-1]["width"] += 1
        time.sleep(2)

@app.route("/api/get-coordinates", methods=["GET"])
def get_coordinates():
    """Fetch all the coordinates and return them"""
    # Example data, replace this with your actual query
    process = [
        {"process_id": 1, "operation_status": "active", "x": 10, "y": 20, "width": 5, "height": 10},
        {"process_id": 2, "operation_status": "inactive", "x": 15, "y": 25, "width": 7, "height": 12},
    ]

    # Store data in global coordinates list for the increment function to access
    global coordinates
    coordinates = process

    # Start the background thread to increment the last coordinate's width
    threading.Thread(target=increment_last_width, daemon=True).start()

    return jsonify({
        "success": True,
        "message_response": "COORDINATES FETCHED SUCCESSFULLY",
        "message_content": "COORDINATES fetched successfully",
        "data": process
    }), 200

if __name__ == "__main__":
    app.run(debug=True)
---------------
import pytest
import time
from flask import Flask, jsonify
from unittest import mock
from threading import Thread

# Assuming the Flask app and background function are defined in your app.py
from app import app, coordinates, increment_last_width

# Mocking the time.sleep method to speed up the test
@pytest.fixture
def mock_sleep():
    with mock.patch('time.sleep', return_value=None):
        yield

# Test the increment_last_width function
def test_increment_last_width(mock_sleep):
    # Setup initial coordinates with one entry
    coordinates.append({"process_id": 1, "operation_status": "active", "x": 10, "y": 20, "width": 5, "height": 10})

    # Start the background thread
    thread = Thread(target=increment_last_width, daemon=True)
    thread.start()

    # Run the thread for a few cycles (simulate 2 seconds increments)
    time.sleep(3)  # Sleep for 3 seconds to allow at least 1 increment

    # Check that the width of the last coordinate has been incremented
    assert coordinates[-1]["width"] == 6

    # Stop the thread (optional: for safety in a real test environment)
    thread.join(timeout=1)

# Test the /api/get-coordinates endpoint
def test_get_coordinates(client, mock_sleep):
    # Setup initial coordinates with one entry
    coordinates.append({"process_id": 1, "operation_status": "active", "x": 10, "y": 20, "width": 5, "height": 10})

    # Send a GET request to the endpoint
    response = client.get('/api/get-coordinates')

    # Assert the response status code
    assert response.status_code == 200

    # Assert that the returned data contains the correct coordinates
    data = response.get_json()
    assert data['success'] is True
    assert len(data['data']) > 0
    assert data['data'][0]['width'] == 5

    # Check if the background task is running by ensuring that width will increment
    time.sleep(3)  # Wait for the background thread to update the width
    assert coordinates[-1]["width"] == 6  # Check if the width was incremented

