2. Vue Query Implementation
Install Vue Query:

bash
Copy
Edit
npm install @tanstack/vue-query
Set up Vue Query plugin in your app:

javascript
Copy
Edit
import { createApp } from "vue";
import { VueQueryPlugin } from "@tanstack/vue-query";
import App from "./App.vue";

const app = createApp(App);
app.use(VueQueryPlugin);
app.mount("#app");
Vue Component using Vue Query and Options API
javascript
Copy
Edit
<template>
  <div>
    <h1>Coordinates with Vue Query</h1>
    <ul v-if="coordinates">
      <li v-for="coord in coordinates" :key="coord.process_id">
        Process ID: {{ coord.process_id }} | Status: {{ coord.operation_status }}
        | X: {{ coord.x }} | Y: {{ coord.y }}
      </li>
    </ul>
    <p v-else>Loading...</p>
  </div>
</template>

<script>
import { useQuery } from "@tanstack/vue-query";

export default {
  data() {
    return {
      coordinates: [],
    };
  },
  methods: {
    fetchCoordinates() {
      return fetch("/api/get-coordinates")
        .then((response) => {
          if (!response.ok) throw new Error("Failed to fetch data");
          return response.json();
        })
        .then((data) => data.data);
    },
  },
  created() {
    const query = useQuery(["coordinates"], this.fetchCoordinates, {
      refetchInterval: 5000, // Polling every 5 seconds
      onSuccess: (data) => {
        this.coordinates = data;
      },
    });

    query.refetch(); // Fetch immediately
  },
};
</script>

------------------
import { shallowMount } from "@vue/test-utils";
import { QueryClient, VueQueryPlugin } from "@tanstack/vue-query";
import CoordinatesComponent from "@/components/CoordinatesComponent.vue"; // Adjust the path as needed

describe("CoordinatesComponent", () => {
  let queryClient;

  beforeEach(() => {
    // Set up Vue Query Plugin
    queryClient = new QueryClient();
  });

  it("displays 'Loading...' initially", () => {
    const wrapper = shallowMount(CoordinatesComponent, {
      global: {
        plugins: [[VueQueryPlugin, { queryClient }]],
      },
    });

    expect(wrapper.text()).toContain("Loading...");
  });

  it("fetches and displays coordinates correctly", async () => {
    // Mock fetch response
    global.fetch = jest.fn(() =>
      Promise.resolve({
        ok: true,
        json: () =>
          Promise.resolve({
            data: [
              { process_id: 1, operation_status: "Active", x: 100, y: 200 },
              { process_id: 2, operation_status: "Inactive", x: 300, y: 400 },
            ],
          }),
      })
    );

    const wrapper = shallowMount(CoordinatesComponent, {
      global: {
        plugins: [[VueQueryPlugin, { queryClient }]],
      },
    });

    // Wait for Vue Query to resolve the fetch
    await new Promise((resolve) => setTimeout(resolve, 0)); // Allow the microtask queue to flush

    // Verify the data is rendered correctly
    expect(wrapper.text()).toContain("Process ID: 1 | Status: Active | X: 100 | Y: 200");
    expect(wrapper.text()).toContain("Process ID: 2 | Status: Inactive | X: 300 | Y: 400");

    // Cleanup fetch mock
    global.fetch.mockRestore();
  });
});
