<template>
  <v-container class="container" fluid>
    <v-row class="ProductLineHeader">
      <common-label :item="ErrorInformationTitle" />
    </v-row>

    <v-row>
      <v-col class="error-screen">
        <v-list
          v-for="(item, index) in abnormalities"
          :key="item.id"
          :style="{ transform: getTransform(index) }"
          :class="{ 'zoomed-item': currentZoomedIndex === index }"
          class="zoom-item"
          style="background-color: cadetblue; margin: 0; padding: 5px"
        >
          <v-list-item-title
            class="v-list-item-title"
            style="background-color: royalblue; margin: 0; padding: 0"
          >
            <span>
              <span class="replenish-number">{{ index + 1 }} </span>
              {{ item.process_name }} {{ item.error_code }} {{ item.error_message }}
            </span>
          </v-list-item-title>
        </v-list>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import CommonLabel from '@/components/common/CommonLabel.vue'
import { ERROR_INFORMATION_LABEL } from '@/common/recipe/rLabels'

export default {
  name: 'ErrorInformation',
  components: {
    CommonLabel,
  },
  props: {
    abnormalities: {
      type: Array,
      required: true,
    },
  },
  data() {
    return {
      ErrorInformationTitle: ERROR_INFORMATION_LABEL,
      currentZoomedIndex: -1,
      isAnimating: true,
      animationTimeout: null,
      pauseTimeout: null,
      debouncedHandleResize: null,
    }
  },
  methods: {
    getTransform(index) {
      return this.currentZoomedIndex === index ? 'scale(1.2)' : 'scale(1)'
    },
    animateItem(index) {
      if (!this.isAnimating) return

      this.currentZoomedIndex = index

      this.animationTimeout = setTimeout(() => {
        this.currentZoomedIndex = -1

        // Move to the next item
        const nextIndex = (index + 1) % this.abnormalities.length

        // Set pause duration based on the index
        const pauseDuration = nextIndex % 7 === 0 ? 7000 : 500

        this.pauseTimeout = setTimeout(() => {
          this.animateItem(nextIndex)
        }, pauseDuration)
      }, 500)
    },
    handleResize() {
      if (window.innerWidth >= 768) {
        this.isAnimating = false
        clearTimeout(this.animationTimeout)
        clearTimeout(this.pauseTimeout)
        this.currentZoomedIndex = -1
      } else {
        this.isAnimating = true
        this.animateItem(0)
      }
    },
    debounce(func, delay) {
      let timeout
      return (...args) => {
        clearTimeout(timeout)
        timeout = setTimeout(() => func.apply(this, args), delay)
      }
    },
    setupListeners() {
      this.debouncedHandleResize = this.debounce(this.handleResize, 200)
      window.addEventListener('resize', this.debouncedHandleResize)
      if (window.innerWidth < 768) this.animateItem(0)
    },
    cleanupListeners() {
      window.removeEventListener('resize', this.debouncedHandleResize)
      clearTimeout(this.animationTimeout)
      clearTimeout(this.pauseTimeout)
    },
  },
  mounted() {
    this.setupListeners()
  },
  beforeUnmount() {
    this.cleanupListeners()
  },
}
</script>

import { mount } from '@vue/test-utils';
import ErrorInformation from '@/components/ErrorInformation.vue';
import CommonLabel from '@/components/common/CommonLabel.vue';

jest.useFakeTimers();

describe('ErrorInformation.vue', () => {
  const abnormalitiesMock = [
    { id: 1, process_name: 'Process 1', error_code: 'E01', error_message: 'Error 1' },
    { id: 2, process_name: 'Process 2', error_code: 'E02', error_message: 'Error 2' },
  ];

  let wrapper;

  beforeEach(() => {
    wrapper = mount(ErrorInformation, {
      props: {
        abnormalities: abnormalitiesMock,
      },
      global: {
        components: { CommonLabel },
      },
    });
  });

  afterEach(() => {
    wrapper.unmount();
  });

  it('renders the CommonLabel component with the correct title', () => {
    const commonLabel = wrapper.findComponent(CommonLabel);
    expect(commonLabel.exists()).toBe(true);
    expect(commonLabel.props('item')).toBe(wrapper.vm.ErrorInformationTitle);
  });

  it('renders the list of abnormalities correctly', () => {
    const listItems = wrapper.findAll('.zoom-item');
    expect(listItems.length).toBe(abnormalitiesMock.length);
    expect(listItems[0].text()).toContain('Process 1');
    expect(listItems[1].text()).toContain('Process 2');
  });

  it('animates items when the screen width is less than 768px', async () => {
    global.innerWidth = 500; // Simulate a small screen
    wrapper.vm.handleResize();
    jest.advanceTimersByTime(500); // Simulate animation timeout
    expect(wrapper.vm.currentZoomedIndex).toBe(0);

    jest.advanceTimersByTime(500); // Move to the next item
    expect(wrapper.vm.currentZoomedIndex).toBe(-1);
  });

  it('stops animation when the screen width is greater than or equal to 768px', async () => {
    global.innerWidth = 800; // Simulate a large screen
    wrapper.vm.handleResize();
    expect(wrapper.vm.isAnimating).toBe(false);
    expect(wrapper.vm.currentZoomedIndex).toBe(-1);
  });

  it('calls setupListeners on mount', () => {
    const setupListenersSpy = jest.spyOn(wrapper.vm, 'setupListeners');
    wrapper.vm.$options.mounted[0].call(wrapper.vm); // Call mounted hook manually
    expect(setupListenersSpy).toHaveBeenCalled();
  });

  it('calls cleanupListeners on beforeUnmount', () => {
    const cleanupListenersSpy = jest.spyOn(wrapper.vm, 'cleanupListeners');
    wrapper.vm.$options.beforeUnmount[0].call(wrapper.vm); // Call beforeUnmount hook manually
    expect(cleanupListenersSpy).toHaveBeenCalled();
  });

  it('cleans up timeouts on unmount', () => {
    wrapper.vm.animationTimeout = setTimeout(() => {}, 1000);
    wrapper.vm.pauseTimeout = setTimeout(() => {}, 1000);
    wrapper.unmount();
    expect(clearTimeout).toHaveBeenCalledTimes(2);
  });
});
