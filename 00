<script>
import CommonLabel from '@/components/common/CommonLabel.vue';
import { ERROR_INFORMATION_LABEL } from '@/common/recipe/rLabels';

export default {
  name: 'ErrorInformation',
  components: {
    CommonLabel,
  },
  props: {
    abnormalities: {
      type: Array,
      required: true,
    },
  },
  data() {
    return {
      ErrorInformationTitle: ERROR_INFORMATION_LABEL,
      currentZoomedIndex: -1,
      isAnimating: true,
      animationTimeout: null,
      pauseTimeout: null,
      debouncedHandleResize: null,
      currentGroup: 0, // 0 for indices 1-7, 1 for indices 8-14
    };
  },
  methods: {
    getTransform(index) {
      return this.currentZoomedIndex === index ? 'scale(1.2)' : 'scale(1)';
    },
    animateGroup(group) {
      if (!this.isAnimating) return;

      const start = group === 0 ? 0 : 7; // Start index for the group
      const end = group === 0 ? 7 : 14; // End index for the group

      const animateItem = (index) => {
        if (!this.isAnimating) return;

        this.currentZoomedIndex = index;

        this.animationTimeout = setTimeout(() => {
          this.currentZoomedIndex = -1;

          const nextIndex = index + 1;
          if (nextIndex < end) {
            this.animationTimeout = setTimeout(() => animateItem(nextIndex), 500);
          } else {
            this.pauseTimeout = setTimeout(() => {
              this.currentGroup = (this.currentGroup + 1) % 2; // Switch group
              this.animateGroup(this.currentGroup);
            }, 7000); // Pause duration
          }
        }, 500);
      };

      animateItem(start);
    },
    handleResize() {
      if (window.innerWidth >= 768) {
        this.isAnimating = false;
        clearTimeout(this.animationTimeout);
        clearTimeout(this.pauseTimeout);
        this.currentZoomedIndex = -1;
      } else {
        this.isAnimating = true;
        this.animateGroup(this.currentGroup);
      }
    },
    debounce(func, delay) {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), delay);
      };
    },
    setupListeners() {
      this.debouncedHandleResize = this.debounce(this.handleResize, 200);
      window.addEventListener('resize', this.debouncedHandleResize);
      if (window.innerWidth < 768) this.animateGroup(this.currentGroup);
    },
    cleanupListeners() {
      window.removeEventListener('resize', this.debouncedHandleResize);
      clearTimeout(this.animationTimeout);
      clearTimeout(this.pauseTimeout);
    },
  },
  mounted() {
    this.setupListeners();
  },
  beforeUnmount() {
    this.cleanupListeners();
  },
};
</script>
------
import { shallowMount } from '@vue/test-utils';
import ErrorInformation from '@/components/ErrorInformation.vue';
import CommonLabel from '@/components/common/CommonLabel.vue';
import { ERROR_INFORMATION_LABEL } from '@/common/recipe/rLabels';

jest.useFakeTimers();

describe('ErrorInformation.vue', () => {
  let wrapper;

  const mockAbnormalities = [
    { id: 1, process_name: 'Process 1', error_code: 'E1', error_message: 'Error 1' },
    { id: 2, process_name: 'Process 2', error_code: 'E2', error_message: 'Error 2' },
    { id: 3, process_name: 'Process 3', error_code: 'E3', error_message: 'Error 3' },
    { id: 4, process_name: 'Process 4', error_code: 'E4', error_message: 'Error 4' },
    { id: 5, process_name: 'Process 5', error_code: 'E5', error_message: 'Error 5' },
    { id: 6, process_name: 'Process 6', error_code: 'E6', error_message: 'Error 6' },
    { id: 7, process_name: 'Process 7', error_code: 'E7', error_message: 'Error 7' },
    { id: 8, process_name: 'Process 8', error_code: 'E8', error_message: 'Error 8' },
    { id: 9, process_name: 'Process 9', error_code: 'E9', error_message: 'Error 9' },
    { id: 10, process_name: 'Process 10', error_code: 'E10', error_message: 'Error 10' },
    { id: 11, process_name: 'Process 11', error_code: 'E11', error_message: 'Error 11' },
    { id: 12, process_name: 'Process 12', error_code: 'E12', error_message: 'Error 12' },
    { id: 13, process_name: 'Process 13', error_code: 'E13', error_message: 'Error 13' },
    { id: 14, process_name: 'Process 14', error_code: 'E14', error_message: 'Error 14' },
  ];

  beforeEach(() => {
    wrapper = shallowMount(ErrorInformation, {
      props: {
        abnormalities: mockAbnormalities,
      },
      global: {
        components: {
          CommonLabel,
        },
      },
    });
  });

  afterEach(() => {
    wrapper.unmount();
  });

  it('renders the CommonLabel component with the correct title', () => {
    const label = wrapper.findComponent(CommonLabel);
    expect(label.exists()).toBe(true);
    expect(label.props('item')).toBe(ERROR_INFORMATION_LABEL);
  });

  it('renders the abnormalities list correctly', () => {
    const listItems = wrapper.findAll('.zoom-item');
    expect(listItems.length).toBe(mockAbnormalities.length);

    listItems.forEach((item, index) => {
      expect(item.text()).toContain(mockAbnormalities[index].process_name);
      expect(item.text()).toContain(mockAbnormalities[index].error_code);
      expect(item.text()).toContain(mockAbnormalities[index].error_message);
    });
  });

  it('animates items in groups of 7 with a 7-second pause between groups', async () => {
    // Start animation
    wrapper.vm.animateGroup(0);
    expect(wrapper.vm.currentZoomedIndex).toBe(0);

    // Advance time to the next item in the group
    jest.advanceTimersByTime(500);
    expect(wrapper.vm.currentZoomedIndex).toBe(1);

    // Complete group 1-7
    jest.advanceTimersByTime(500 * 6); // Advance 6 more items
    expect(wrapper.vm.currentZoomedIndex).toBe(-1);

    // Pause for 7 seconds
    jest.advanceTimersByTime(7000);
    expect(wrapper.vm.currentGroup).toBe(1);

    // Start group 8-14
    wrapper.vm.animateGroup(1);
    expect(wrapper.vm.currentZoomedIndex).toBe(7);

    // Complete group 8-14
    jest.advanceTimersByTime(500 * 6); // Advance 6 more items
    expect(wrapper.vm.currentZoomedIndex).toBe(-1);

    // Loop back to group 1-7
    jest.advanceTimersByTime(7000);
    expect(wrapper.vm.currentGroup).toBe(0);
  });

  it('pauses animation when the window is resized to a larger width', async () => {
    global.innerWidth = 1024;
    wrapper.vm.handleResize();

    expect(wrapper.vm.isAnimating).toBe(false);
    expect(wrapper.vm.currentZoomedIndex).toBe(-1);

    // Ensure no animation is happening
    jest.advanceTimersByTime(10000);
    expect(wrapper.vm.currentZoomedIndex).toBe(-1);
  });

  it('resumes animation when the window is resized to a smaller width', async () => {
    global.innerWidth = 500;
    wrapper.vm.handleResize();

    expect(wrapper.vm.isAnimating).toBe(true);
    expect(wrapper.vm.currentGroup).toBe(0);

    wrapper.vm.animateGroup(0);
    expect(wrapper.vm.currentZoomedIndex).toBe(0);

    jest.advanceTimersByTime(500);
    expect(wrapper.vm.currentZoomedIndex).toBe(1);
  });

  it('cleans up listeners and timeouts on unmount', () => {
    const spyRemoveEventListener = jest.spyOn(window, 'removeEventListener');
    wrapper.unmount();

    expect(spyRemoveEventListener).toHaveBeenCalledWith('resize', wrapper.vm.debouncedHandleResize);
    expect(clearTimeout).toHaveBeenCalledTimes(2);
  });
});
