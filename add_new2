import { shallowMount } from '@vue/test-utils';
import OperationStatusScreen from '@/components/pages/OperationStatusScreen.vue';

describe('OperationStatusScreen.vue', () => {
  let wrapper;

  beforeEach(() => {
    wrapper = shallowMount(OperationStatusScreen, {
      global: {
        components: {
          VSimpleTable: 'v-simple-table',
          VContainer: 'v-container',
          VCol: 'v-col',
          VRow: 'v-row',
        },
      },
      data() {
        return {
          rectangles: [],
        };
      },
    });
  });

  afterEach(() => {
    wrapper.unmount();
  });

  it('should return the correct operationStatusLabel based on the last rectangle status', () => {
    const testCases = [
      { rectangles: [], expected: '' },
      { rectangles: [{ operation_status: 1 }], expected: '稼働中' },
      { rectangles: [{ operation_status: 2 }], expected: '準備中' },
      { rectangles: [{ operation_status: 3 }], expected: '異常発生中' },
      { rectangles: [{ operation_status: 999 }], expected: '' },
    ];

    testCases.forEach(({ rectangles, expected }) => {
      wrapper.setData({ rectangles });
      expect(wrapper.vm.operationStatusLabel).toBe(expected);
    });
  });

  it('should correctly determine colors based on operation status', () => {
    const colorMapping = {
      1: { statusColor: 'green', strokeColor: 'white' },
      2: { statusColor: '#FFCA37', strokeColor: '#424242' },
      3: { statusColor: 'red', strokeColor: 'white' },
      99: { statusColor: 'grey', strokeColor: 'white' },
    };

    Object.entries(colorMapping).forEach(([status, expected]) => {
      expect(wrapper.vm.determineColor(Number(status))).toEqual(expected);
    });
  });

  it('should fetch process coordinates and update rectangles correctly', async () => {
    const mockRectangles = [
      { x: 10, y: 20, width: 50, height: 50, operation_status: 1, process_id: 1 },
      { x: 70, y: 80, width: 50, height: 50, operation_status: 3, process_id: 2 },
    ];

    wrapper.vm.fetchProcessCoordinates = jest.fn().mockResolvedValue(mockRectangles);

    await wrapper.vm.fetchProcessCoordinates();

    expect(wrapper.vm.rectangles).toEqual(mockRectangles);
  });

  it('should render a canvas element', () => {
    expect(wrapper.find('canvas').exists()).toBe(true);
  });

  it('should draw circle labels correctly', () => {
    const mockContext = {
      beginPath: jest.fn(),
      arc: jest.fn(),
      closePath: jest.fn(),
      fill: jest.fn(),
      stroke: jest.fn(),
      fillText: jest.fn(),
      fillStyle: '',
      strokeStyle: '',
      font: '',
      textAlign: '',
      textBaseline: '',
    };

    const x = 50;
    const y = 50;
    const radius = 15;
    const label = '123';
    const fillStyle = 'transparent';
    const strokeStyle = 'white';

    wrapper.vm.drawCircleLabel(mockContext, x, y, radius, label, fillStyle, strokeStyle);

    expect(mockContext.beginPath).toHaveBeenCalled();
    expect(mockContext.arc).toHaveBeenCalledWith(x, y, radius, 0, Math.PI * 2);
    expect(mockContext.closePath).toHaveBeenCalled();
    expect(mockContext.fillStyle).toBe(fillStyle);
    expect(mockContext.fill).toHaveBeenCalled();
    expect(mockContext.strokeStyle).toBe(strokeStyle);
    expect(mockContext.stroke).toHaveBeenCalled();
    expect(mockContext.fillText).toHaveBeenCalledWith(label, x, y);
  });
});
