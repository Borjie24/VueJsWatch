<template>
  <div>
    <h1>Coordinates (WebSocket + Vue Query)</h1>
    <ul v-if="coordinates">
      <li v-for="coord in coordinates" :key="coord.process_id">
        Process ID: {{ coord.process_id }} | Status: {{ coord.operation_status }}
        | X: {{ coord.x }} | Y: {{ coord.y }}
      </li>
    </ul>
    <p v-else>Loading...</p>
  </div>
</template>

<script>
import { io } from "socket.io-client";
import { useQuery } from "@tanstack/vue-query";

export default {
  data() {
    return {
      socket: null,
      coordinates: [],
    };
  },
  methods: {
    fetchCoordinates() {
      return fetch("/api/get-coordinates")
        .then((response) => {
          if (!response.ok) throw new Error("Failed to fetch data");
          return response.json();
        })
        .then((data) => data.data);
    },
    setupWebSocket() {
      this.socket = io("http://localhost:5000");

      this.socket.on("connect", () => {
        console.log("WebSocket connected");
      });

      this.socket.on("disconnect", () => {
        console.log("WebSocket disconnected");
      });

      this.socket.on("update", () => {
        console.log("Real-time update received");
        this.refetchCoordinates(); // Trigger Vue Query refetch
      });
    },
  },
  created() {
    const query = useQuery(["coordinates"], this.fetchCoordinates, {
      onSuccess: (data) => {
        this.coordinates = data;
      },
    });

    this.refetchCoordinates = query.refetch;
    this.setupWebSocket();
  },
  beforeDestroy() {
    if (this.socket) {
      this.socket.disconnect();
    }
  },
};
</script>

import { shallowMount } from "@vue/test-utils";
import { QueryClient, VueQueryPlugin } from "@tanstack/vue-query";
import CoordinatesComponent from "@/components/CoordinatesComponent.vue"; // Adjust path as needed
import { io } from "socket.io-client";

jest.mock("socket.io-client");

describe("CoordinatesComponent (WebSocket + Vue Query)", () => {
  let queryClient;
  let mockSocket;

  beforeEach(() => {
    queryClient = new QueryClient();

    // Mock socket.io client
    mockSocket = {
      on: jest.fn(),
      emit: jest.fn(),
      disconnect: jest.fn(),
    };
    io.mockReturnValue(mockSocket);

    // Mock fetch API
    global.fetch = jest.fn(() =>
      Promise.resolve({
        ok: true,
        json: () =>
          Promise.resolve({
            data: [
              { process_id: 1, operation_status: "Active", x: 100, y: 200 },
              { process_id: 2, operation_status: "Inactive", x: 300, y: 400 },
            ],
          }),
      })
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
    global.fetch.mockRestore();
  });

  it("displays 'Loading...' initially", () => {
    const wrapper = shallowMount(CoordinatesComponent, {
      global: {
        plugins: [[VueQueryPlugin, { queryClient }]],
      },
    });

    expect(wrapper.text()).toContain("Loading...");
  });

  it("fetches and displays coordinates correctly", async () => {
    const wrapper = shallowMount(CoordinatesComponent, {
      global: {
        plugins: [[VueQueryPlugin, { queryClient }]],
      },
    });

    // Wait for Vue Query to resolve the fetch
    await new Promise((resolve) => setTimeout(resolve, 0));

    expect(wrapper.text()).toContain("Process ID: 1 | Status: Active | X: 100 | Y: 200");
    expect(wrapper.text()).toContain("Process ID: 2 | Status: Inactive | X: 300 | Y: 400");
  });

  it("sets up WebSocket connection and handles events", () => {
    const wrapper = shallowMount(CoordinatesComponent, {
      global: {
        plugins: [[VueQueryPlugin, { queryClient }]],
      },
    });

    // Check WebSocket setup
    expect(io).toHaveBeenCalledWith("http://localhost:5000");
    expect(mockSocket.on).toHaveBeenCalledWith("connect", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("disconnect", expect.any(Function));
    expect(mockSocket.on).toHaveBeenCalledWith("update", expect.any(Function));

    // Simulate WebSocket "update" event
    const updateCallback = mockSocket.on.mock.calls.find((call) => call[0] === "update")[1];
    updateCallback(); // Trigger the "update" event

    // Verify Vue Query refetch is called
    const { vm } = wrapper;
    jest.spyOn(vm, "refetchCoordinates");
    expect(vm.refetchCoordinates).toBeDefined();
  });

  it("cleans up WebSocket on component destroy", () => {
    const wrapper = shallowMount(CoordinatesComponent, {
      global: {
        plugins: [[VueQueryPlugin, { queryClient }]],
      },
    });

    wrapper.unmount();
    expect(mockSocket.disconnect).toHaveBeenCalled();
  });
});

